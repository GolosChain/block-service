// Structure: `{contract: {action: [paths]}}`
const KNOWN_ACTIONS = {
    cyber: {
        newaccount: [
            'creator',
            'name',
            'owner/accounts/permission/actor',
            'active/accounts/permission/actor',
        ],
        updateauth: ['account', 'auth/accounts/permission/actor'],
        deleteauth: ['account'],
        linkauth: ['account', 'code'],
        unlinkauth: ['account', 'code'],
        setcode: ['account'],
        setabi: ['account'],
        reqauth: ['from'],
        bidname: ['bidder', 'newname'],
        bidrefund: ['bidder'],
        providebw: ['provider', 'account'],
        checkwin: [],
    },
    'cyber.domain': {
        newusername: ['creator', 'owner'],
        newdomain: ['creator'],
        passdomain: ['from', 'to'],
        linkdomain: ['owner', 'to'],
        unlinkdomain: ['owner'],
        biddomain: ['bidder'],
        biddmrefund: ['bidder'],
        checkwin: [],
    },
    'cyber.msig': {
        propose: ['proposer', 'requested/actor'],
        approve: ['proposer', 'level/actor'],
        unapprove: ['proposer', 'level/actor'],
        cancel: ['proposer', 'canceler'],
        exec: ['proposer', 'executer'],
        invalidate: ['account'],
    },
    'cyber.token': {
        open: ['owner', 'ram_payer'],
        claim: ['owner'],
        close: ['owner'],
        create: ['issuer'],
        issue: ['to'],
        retire: [],
        transfer: ['from', 'to'],
        payment: ['from', 'to'],
        bulktransfer: ['from', 'recipients/to'],
        bulkpayment: ['from', 'recipients/to'],
    },
    'cyber.stake': {
        create: [],
        enable: [],
        open: ['owner', 'ram_payer'],
        delegatevote: ['grantor_name', 'recipient_name'],
        recallvote: ['grantor_name', 'recipient_name'],
        setgrntterms: ['grantor_name', 'recipient_name'],
        delegateuse: ['grantor_name', 'recipient_name'],
        recalluse: ['grantor_name', 'recipient_name'],
        claim: ['grantor_name', 'recipient_name'],
        withdraw: ['account'],
        setkey: ['account'],
        setminstaked: ['account'],
        setproxyfee: ['account'],
        setproxylvl: ['account'],
        updatefunds: ['account'],
        pick: ['accounts'],
        // reward: ['rewards/0']; // only called internally, have no named field; TODO: resolve
    },
    'gls.vesting': {
        setparams: ['params/provider/actor'],
        open: ['owner', 'ram_payer'],
        withdraw: ['from', 'to'],
        retire: ['user'],
        stopwithdraw: ['owner'],
        unlocklimit: ['owner'],
        close: ['owner'],
        delegate: ['delegator', 'delegatee'],
        undelegate: ['delegator', 'delegatee'],
        create: ['notify_acc'],
        procwaiting: ['payer'],
    },
    'gls.emit': {
        setparams: ['params/pools/name', 'params/provider/actor'],
        emit: [],
        start: [],
        stop: [],
    },
    'gls.publish': {
        createmssg: ['message_id/author', 'parent_id/author', 'beneficiaries/account'],
        updatemssg: ['message_id/author'],
        deletemssg: ['message_id/author'],
        setcurprcnt: ['message_id/author'],
        setmaxpayout: ['message_id/author'],
        paymssgrwrd: ['message_id/author'],
        upvote: ['voter', 'message_id/author'],
        unvote: ['voter', 'message_id/author'],
        downvote: ['voter', 'message_id/author'],
        reblog: ['rebloger', 'message_id/author'],
        erasereblog: ['rebloger', 'message_id/author'],
        setrules: [],
        setlimits: [],
        setparams: ['params/value', 'params/actor'],
        calcrwrdwt: ['account'],
        deletevotes: ['account'],
        closemssgs: ['payer'],
        addpermlink: ['msg/author', 'parent/author'],
        addpermlinks: ['permlinks/msg/author', 'permlinks/parent/author'],
        delpermlink: ['msg/author'],
        delpermlinks: ['permlinks/author'],
    },
    'gls.ctrl': {
        setparams: ['params/name', 'params/provider/actor'],
        regwitness: ['witness'],
        unregwitness: ['witness'],
        stopwitness: ['witness'],
        startwitness: ['witness'],
        votewitness: ['voter', 'witness'],
        unvotewitn: ['voter', 'witness'],
        changevest: ['who'],
    },
    'gls.charge': {
        use: ['user'],
        usenotifygt: ['user'],
        usenotifylt: ['user'],
        setrestorer: [],
    },
    'gls.social': {
        pin: ['pinner', 'pinning'],
        addpin: ['pinner', 'pinning'],
        unpin: ['pinner', 'pinning'],
        block: ['blocker', 'blocking'],
        addblock: ['blocker', 'blocking'],
        unblock: ['blocker', 'blocking'],
        updatemeta: ['account'],
        deletemeta: ['account'],
    },
    'gls.referral': {
        setparams: [],
        closeoldref: [],
        addreferral: ['referrer', 'referral'],
    },
};

module.exports = KNOWN_ACTIONS;
